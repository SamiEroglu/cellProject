/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.2 animal.gltf
Author: Lauri Purhonen (https://sketchfab.com/LauriPurhonen)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/animal-cell-downloadable-ddc40bb0900544959f02d3ff83c32615
Title: Animal cell - Downloadable
*/

import React, { useState, useEffect, useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { a } from '@react-spring/three';

export default function Animal({ ...props }) {
	const [hovered, setHovered] = useState(false);
	const [current, setCurrent] = useState(null);
	const [explanationTitle, setExplanationTitle] = useState('just hover');

	const [titles] = useState({
		'Material.001': 'nükleüs',
		'Material.003': 'benekler',
		'Material.004': 'jöle',
		'Material.005': 'endoplazmik retikulum',
		'Material.006': 'golgi cisimciği',
		'Material.007': 'mitokondri içerisi',
		'Material.008': 'mitokondri',
		'Material.009': 'nükleüs çekirdek',
		'Material.010': 'nükleüs içerisi',
		'Material.011': 'lizozom',
	});

	const [explanations] = useState({
		default: 'açıklamayı görmek için tıklayın',
		nükleüs: 'çekirdek',
		benekler: 'benekler',
		jöle: 'jöle katmanı',
		'endoplazmik retikulum': 'er',
		'golgi cisimciği': 'golgi',
		'mitokondri içerisi': 'enerji',
		mitokondri: 'enerji merkezi',
		'nükleüs kabuk': '',
		'nükleüs içerisi': '',
		'nükleüs çekirdek': 'çekirdek',
		lizozom: 'lizozom',
	});

	useEffect(() => {
		document.body.style.cursor = hovered ? 'pointer' : 'auto';
		if (titles[current] === undefined) {
			setCurrent('hover over the cell to see the name');
		} else {
			document.getElementById('title').innerHTML = titles[current];
			document.getElementById('explanation').innerHTML =
				explanations[titles[current]];
		}
		// if (explanations[explanationTitle] !== undefined) {
		// 	document.getElementById('explanation').innerHTML =
		// 		explanations[explanationTitle];
		// }
	}, [hovered, current, explanations, explanationTitle, titles]);

	const group = useRef();
	const { nodes, materials } = useGLTF('/animal.gltf');

	return (
		<>
			<a.group
				dispose={null}
				ref={group}
				{...props}

				// onClick={() => setIsZoom(!isZoom)}
			>
				<group rotation={[-Math.PI / 4, 0, 1]}>
					{/* saydam tabaka */}
					{/* <mesh
						className="cell-jelly"
						geometry={nodes.Sphere001_0.geometry}
						material={materials['Material.004']}
						position={[0.2, 0.29, 0]}
						scale={[1.19, 1.27, 1.27]}
						onPointerDown={(e) => {
							setExplanationTitle('jöle');
						}}
						onPointerOver={() => {
							setHovered(true);
							setCurrent(materials['Material.004'].name);
						}}
						onPointerOut={() => {
							setHovered(false);
							setCurrent('hover over the cell to see the name');
						}}
					/> */}

					{/* üçlü mitokondri */}
					<mesh
						className="mitochondria"
						geometry={nodes.Sphere002_0.geometry}
						material={materials['Material.008']}
						position={[-0.7, -3.5, 2]}
						rotation={[0, -0.06, 3.06]}
						scale={0.05}
						onPointerDown={(e) => {
							setExplanationTitle('mitokondri');
						}}
						onPointerOver={() => {
							setHovered(true);
							setCurrent(materials['Material.008'].name);
						}}
						onPointerOut={() => {
							setHovered(false);
							setCurrent('hover over the cell to see the name');
						}}
					/>

					{/* nükleüs kabuk */}
					<mesh
						geometry={nodes.Icosphere_0.geometry}
						material={materials['Material.001']}
						position={[-0.39, 0.61, 0.01]}
						scale={1.14}
						onPointerDown={(e) => {
							setExplanationTitle('nükleüs kabuk');
						}}
						onPointerOver={() => {
							setHovered(true);
							setCurrent(materials['Material.001'].name);
						}}
						onPointerOut={() => {
							setHovered(false);
							setCurrent('hover over the cell to see the name');
						}}
					/>

					{/* retikulum */}
					<mesh
						geometry={nodes.BezierCurve_0.geometry}
						material={materials['Material.005']}
						position={[-0.39, 0.61, 0.01]}
						scale={1.14}
						onPointerDown={(e) => {
							setExplanationTitle('endoplazmik retikulum');
						}}
						onPointerOver={() => {
							setHovered(true);
							setCurrent(materials['Material.005'].name);
						}}
						onPointerOut={() => {
							setHovered(false);
							setCurrent('hover over the cell to see the name');
						}}
					/>

					{/* golgi */}
					<mesh
						geometry={nodes.BezierCurve002_0.geometry}
						material={materials['Material.006']}
						position={[1.15, -2, 1.5]}
						rotation={[0, 0, 0.76]}
						scale={0.41}
						onPointerDown={(e) => {
							setExplanationTitle('golgi');
						}}
						onPointerOver={() => {
							setHovered(true);
							setCurrent(materials['Material.006'].name);
						}}
						onPointerOut={() => {
							setHovered(false);
							setCurrent('hover over the cell to see the name');
						}}
					/>

					{/* tabaka */}
					<mesh
						geometry={nodes.Sphere_0.geometry}
						material={materials.Material}
						position={[0.2, 0.2, -1]}
						scale={[1.7, 1.8, 2]}
						onPointerOver={() => {
							setHovered(true);
							setCurrent(materials.Material.name);
						}}
						onPointerOut={() => {
							setHovered(false);
							setCurrent('hover over the cell to see the name');
						}}
					/>

					{/* lizozom ve diğeri */}
					<mesh
						geometry={nodes.Roundcube000_0.geometry}
						material={materials['Material.011']}
						position={[1.5, 1, 1]}
						rotation={[0.01, -0.04, 1.65]}
						scale={0.19}
						onPointerDown={(e) => {
							setExplanationTitle('lizozom');
						}}
						onPointerOver={() => {
							setHovered(true);
							setCurrent(materials['Material.011'].name);
						}}
						onPointerOut={() => {
							setHovered(false);
							setCurrent('hover over the cell to see the name');
						}}
					/>

					{/* nükleüs çekirdek */}
					<mesh
						geometry={nodes.Roundcube001_0.geometry}
						material={materials['Material.009']}
						position={[-0.38, 0.55, 0.2]}
						scale={0.26}
						onPointerDown={(e) => {
							setExplanationTitle('nükleüs çekirdek');
						}}
						onPointerOver={() => {
							setHovered(true);
							setCurrent(materials['Material.009'].name);
						}}
						onPointerOut={() => {
							setHovered(false);
							setCurrent('hover over the cell to see the name');
						}}
					/>

					{/* nükleüs pembik yer */}
					<mesh
						geometry={nodes.Roundcube_0.geometry}
						material={materials['Material.010']}
						position={[-0.38, 0.62, 0]}
						scale={0.98}
						onPointerDown={(e) => {
							setExplanationTitle('nükleüs içerisi');
						}}
						onPointerOver={() => {
							setHovered(true);
							setCurrent(materials['Material.010'].name);
						}}
						onPointerOut={() => {
							setHovered(false);
							setCurrent('hover over the cell to see the name');
						}}
					/>

					{/* benekler */}
					<mesh
						geometry={nodes.Icosphere002_0.geometry}
						material={materials['Material.003']}
						position={[-0.39, 0.61, 0.01]}
						scale={1.14}
						onPointerDown={(e) => {
							setExplanationTitle('benekler');
						}}
						onPointerOver={() => {
							setHovered(true);
							setCurrent(materials['Material.003'].name);
						}}
						onPointerOut={() => {
							setHovered(false);
							setCurrent('hover over the cell to see the name');
						}}
					/>

					{/* mitokondri içerisi */}
					<mesh
						geometry={nodes.Sphere005_0.geometry}
						material={materials['Material.007']}
						position={[-0.7, -3.5, 2]}
						rotation={[0, -0.06, 3.06]}
						scale={0.05}
						onPointerDown={(e) => {
							setExplanationTitle('mitokondri içerisi');
						}}
						onPointerOver={() => {
							setHovered(true);
							setCurrent(materials['Material.007'].name);
						}}
						onPointerOut={() => {
							setHovered(false);
							setCurrent('hover over the cell to see the name');
						}}
					/>
				</group>
			</a.group>
			{/* <a.mesh position={markerPosition} >
      <sphereGeometry args={[0.08]} />
      <meshStandardMaterial color="red" />
    </a.mesh> */}
		</>
	);
}

useGLTF.preload('/animal.gltf');
