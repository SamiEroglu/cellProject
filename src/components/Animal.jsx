/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.2 animal.gltf
Author: Lauri Purhonen (https://sketchfab.com/LauriPurhonen)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/animal-cell-downloadable-ddc40bb0900544959f02d3ff83c32615
Title: Animal cell - Downloadable
*/

import React, { useState, useEffect, useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { a } from '@react-spring/three';

export default function Animal({ ...props }) {
	const [hovered, setHovered] = useState(false);
	const [current, setCurrent] = useState(null);

	const [titles] = useState({
		'Material.001': 'Çekirdek',
		'Material.003': 'Çekirdek',
		'Material.004': 'jöle',
		'Material.005': 'Endoplazmik Retikulum',
		'Material.006': 'Golgi Cisimciği',
		'Material.007': 'Mitokondri',
		'Material.008': 'Mitokondri',
		'Material.009': 'Çekirdek',
		'Material.010': 'Çekirdek',
		'Material.011': 'Sentriyol',
		'Material.012': 'Koful',
		'Hücre Zarı': 'Hücre Zarı',
		Ribozom: 'Ribozom',
		'Material.013': 'Lizozom',
	});

	const [explanations] = useState({
		Çekirdek:
			'Hücrenin yönetim ve denetim merkezidir. Çekirdeğin içerisinde canlının kalıtsal özelliklerini (saç rengi, göz rengi, yaprak şekli gibi) belirleyen yapılar bulunur. Bakteri gibi bazı ilkel canlılarda çekirdek bulunmaz, bu canlıların kalıtsal özelliklerini belirleyen yapılar sitoplazmanın içerisinde dağınık olarak bulunur.',
		benekler: 'benekler',
		jöle: 'jöle katmanı',
		'Endoplazmik Retikulum':
			'Hücrede madde iletiminden sorumlu organeldir. Hücrenin içinde maddelerin taşındığı bit tünel sistemi gibidir. Bitki ve hayvan hücrelerinde ortak olarak bulunur.',
		'Golgi Cisimciği':
			'Üst üste dizilmiş keseciklerden oluşur. Hücrede ter, süt gibi salgı maddelerinin üretiminden ve paketlenmesinden sorumludur. Bitki ve hayvan hücrelerinde ortak olarak bulunur.',
		'mitokondri içerisi': 'enerji',
		Mitokondri:
			'Hücrenin enerji üretim merkezidir. Üretilen enerji hücrenin yaşamsal faaliyetlerin gerçekleştirilmesinde kullanılır. Bitki ve hayvan hücrelerinde ortak bulunur.',
		'nükleüs kabuk': 'nükleüs kabuk',
		'nükleüs çekirdek': 'çekirdek',
		Koful:
			'Hücre için zararlı ve fazla olan maddeleri depolayan kese şeklindeki organeldir. Bitki ve hayvan hücrelerinde ortak olarak bulunur. Ancak bitki hücrelerinde kofullar büyük ve az iken hayvan hücrelerinde ise küçük ve çok sayıdadır.',
		Sentriyol:
			'Yalnızca hayvan hücrelerinde bulunur. Çiftler halinde bulunan ve hücre bölünmesinde görevli olan organeldir. İki farklı silindirik sentriyol bir araya gelerek sentrozomları oluşturur.',
		'Hücre Zarı':
			'Hücreler hücre zarı adı verilen bir zar ile çevrilidir. Hücre zarı, sitoplazmayı dıştan çevreleyerek sitoplazmanın dağılmasını önler, hücreyi korur. Hücre zarı canlıdır, esnektir, ince ve saydamdır, seçici geçirgendir.',
		Ribozom:
			'Hücrede protein sentezinde görevlidir. Hücredeki en küçük organeldir. Bitki ve hayvan hücrelerinde ortak olarak bulunur.',
		Lizozom:
			'Görevi hücre içi sindirimdir. Besinlerin ve büyük moleküllerin parçalanmasından sorumludur. Ayrıca yaşlanan hücrelerin ve organellerin yok edilmesinde de görev alır. Lizozom hayvan hücrelerinde ve ilkel bitki hücrelerinde bulunur.',
	});

	useEffect(() => {
		document.body.style.cursor = hovered ? 'pointer' : 'auto';
		if (titles[current] === undefined) {
			setCurrent('hover over the cell to see the name');
		} else {
			document.getElementById('title').innerHTML = titles[current];
			document.getElementById('explanation').innerHTML =
				explanations[titles[current]];
		}
	}, [hovered, current, explanations, titles]);

	const group = useRef();
	const { nodes, materials } = useGLTF('/animalyso.gltf');

	return (
		<>
			<a.group
				dispose={null}
				ref={group}
				{...props}

				// onClick={() => setIsZoom(!isZoom)}
			>
				<group position={[-0.2, 0, 0]} rotation={[3.5, 1.8, 180]} scale={0.52}>
					{/* saydam tabaka */}
					{/* <mesh
						className="cell-jelly"
						geometry={nodes.Sphere001.geometry}
						material={materials['Material.004']}
						position={[0.2, 0, -0.29]}
						scale={[1.19, 1.27, 1.27]}
						opacity={[0.3]}
						onPointerOver={() => {
							setHovered(true);
							setCurrent(materials['Material.004'].name);
						}}
						onPointerOut={() => {
							setHovered(false);
							setCurrent('hover over the cell to see the name');
						}}
					/> */}

					{/* üçlü mitokondri */}
					<mesh
						className="mitochondria"
						geometry={nodes.Sphere002.geometry}
						material={materials['Material.008']}
						position={[-0.5, 0.02, 3.27]}
						rotation={[-3.14, 0.08, 3.15]}
						scale={0.05}
						onPointerOver={() => {
							setHovered(true);
							setCurrent(materials['Material.008'].name);
						}}
						onPointerOut={() => {
							setHovered(false);
							setCurrent('hover over the cell to see the name');
						}}
					/>

					{/* nükleüs kabuk */}
					<mesh
						geometry={nodes.Icosphere.geometry}
						material={materials['Material.001']}
						position={[-0.39, -0.01, -0.61]}
						scale={1.14}
						onPointerOver={() => {
							setHovered(true);
							setCurrent(materials['Material.001'].name);
						}}
						onPointerOut={() => {
							setHovered(false);
							setCurrent('hover over the cell to see the name');
						}}
					/>

					{/* retikulum */}
					<mesh
						geometry={nodes.BezierCurve.geometry}
						material={materials['Material.005']}
						position={[-0.39, -0.01, -0.61]}
						scale={1.14}
						onPointerOver={() => {
							setHovered(true);
							setCurrent(materials['Material.005'].name);
						}}
						onPointerOut={() => {
							setHovered(false);
							setCurrent('hover over the cell to see the name');
						}}
					/>

					{/* golgi */}
					<mesh
						geometry={nodes.BezierCurve002.geometry}
						material={materials['Material.006']}
						position={[1.15, -0.37, 2.2]}
						rotation={[0, 0.76, 0]}
						scale={0.41}
						onPointerOver={() => {
							setHovered(true);
							setCurrent(materials['Material.006'].name);
						}}
						onPointerOut={() => {
							setHovered(false);
							setCurrent('hover over the cell to see the name');
						}}
					/>
					{/* ribozom */}
					<mesh
						geometry={nodes.BezierCurve001.geometry}
						material={materials['Material.006']}
						position={[1.15, -0.37, 2.2]}
						rotation={[0, 0.76, 0]}
						scale={0.41}
						onPointerOver={() => {
							setHovered(true);
							setCurrent('Ribozom');
						}}
						onPointerOut={() => {
							setHovered(false);
							setCurrent('hover over the cell to see the name');
						}}
					/>

					{/* hücre zarı */}
					<mesh
						geometry={nodes.Sphere.geometry}
						material={materials.Material}
						position={[0.2, -0.13, -0.2]}
						scale={[1.13, 1.2, 1.2]}
						onPointerOver={() => {
							setHovered(true);
							setCurrent('Hücre Zarı');
						}}
						onPointerOut={() => {
							setHovered(false);
							setCurrent('hover over the cell to see the name');
						}}
					/>

					{/* koful */}
					<mesh
						geometry={nodes.Roundcube000.geometry}
						material={materials['Material.011']}
						position={[1.92, -0.21, -0.2]}
						rotation={[-2.67, 1.48, 2.68]}
						scale={0.19}
						onPointerOver={() => {
							setHovered(true);
							setCurrent(materials['Material.011'].name);
						}}
						onPointerOut={() => {
							setHovered(false);
							setCurrent('hover over the cell to see the name');
						}}
					/>

					{/* sentriyol */}
					<mesh
						geometry={nodes.Roundcube002.geometry}
						material={materials['Material.011']}
						position={[1.92, -0.21, -0.2]}
						rotation={[-2.67, 1.48, 2.68]}
						scale={0.19}
						onPointerOver={() => {
							setHovered(true);
							setCurrent('Material.012');
						}}
						onPointerOut={() => {
							setHovered(false);
							setCurrent('hover over the cell to see the name');
						}}
					/>

					{/* nükleüs çekirdek */}
					<mesh
						geometry={nodes.Roundcube001.geometry}
						material={materials['Material.009']}
						position={[-0.38, 0.2, -0.55]}
						scale={0.26}
						onPointerOver={() => {
							setHovered(true);
							setCurrent(materials['Material.009'].name);
						}}
						onPointerOut={() => {
							setHovered(false);
							setCurrent('hover over the cell to see the name');
						}}
					/>

					{/* nükleüs pembik yer */}
					<mesh
						geometry={nodes.Roundcube.geometry}
						material={materials['Material.010']}
						position={[-0.38, 0, -0.62]}
						scale={0.98}
						onPointerOver={() => {
							setHovered(true);
							setCurrent(materials['Material.010'].name);
						}}
						onPointerOut={() => {
							setHovered(false);
							setCurrent('hover over the cell to see the name');
						}}
					/>

					{/* benekler */}
					<mesh
						geometry={nodes.Icosphere002.geometry}
						material={materials['Material.003']}
						position={[-0.39, -0.01, -0.61]}
						scale={1.14}
						onPointerOver={() => {
							setHovered(true);
							setCurrent(materials['Material.003'].name);
						}}
						onPointerOut={() => {
							setHovered(false);
							setCurrent('hover over the cell to see the name');
						}}
					/>

					{/* mitokondri içerisi */}
					<mesh
						geometry={nodes.Sphere005.geometry}
						material={materials['Material.007']}
						position={[-0.38, 0.02, 3.27]}
						rotation={[-3.14, 0.08, 3.09]}
						scale={0.05}
						onPointerOver={() => {
							setHovered(true);
							setCurrent(materials['Material.007'].name);
						}}
						onPointerOut={() => {
							setHovered(false);
							setCurrent('hover over the cell to see the name');
						}}
					/>

					{/* lizozom */}
					<mesh
						geometry={nodes.Sphere003.geometry}
						material={materials['Material.013']}
						onPointerOver={() => {
							setHovered(true);
							setCurrent(materials['Material.013'].name);
						}}
						onPointerOut={() => {
							setHovered(false);
							setCurrent('hover over the cell to see the name');
						}}
					/>
				</group>
			</a.group>
		</>
	);
}

useGLTF.preload('/animalnew.gltf');
